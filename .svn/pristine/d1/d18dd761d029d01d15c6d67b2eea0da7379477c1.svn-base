using EasyWpfLoginNavigateExample.ServiceReference;
using EasyWpfLoginNavigateExample.ServiceReference1;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using WPFClientApplication;
using WPFClientApplication.Helpers;
using WPFClientApplication.Model;
using WPFClientApplication.ViewModel;


namespace EasyWpfLoginNavigateExample.ViewModel.Project
{
    class ShowUsersViewModel : ViewModelBase
    {
        public RelayCommand SelectUsersForProjectCommand { get; set; }

        public ShowUsersViewModel()
        {
            SelectUsersForProjectCommand = new RelayCommand(selectUsersForProject);
        }

        public void selectUsersForProject(object obj)
        {

            List<int> selectedUsers = new List<int>();

            foreach (UserModel user in Users)
            {             
                if (user.IsSelected)
                {
                    selectedUsers.Add(Int32.Parse(user.id));
                }
            }

            // Check empty list
            if (selectedUsers.Count == 0)
            {
                MessageBox.Show("You must select users to add to the project.");
            }
            else
            {
                ProjectServiceClient client = new ProjectServiceClient();
                Boolean usersAdded = client.addUsersToProject(selectedUsers.ToArray());
                MessageBox.Show(usersAdded.ToString());

                if (usersAdded)
                {
                    ApplicationController.GetInstance().GoToPage(ApplicationPage.showCreatedProject);
                }
                else
                {
                    MessageBox.Show("Sorry - Users were not added to the project");
                }
            }

        }

        private List<UserModel> _Users = GetAllUsers();
        public List<UserModel> Users
        {
            get
            {
                return _Users;
            }

            set
            {
                _Users = value;
                RaisePropertyChanged("Users");
            }
        }


        // static method returns all the users in a user model object
        private static List<UserModel> GetAllUsers()
        {
            UserServiceClient client = new UserServiceClient();
            IEnumerable<UserModel> users = client.getAllUsers();

            return users.ToList();
        }

        private bool _isSelected;
        public bool IsSelected
        {
            get { return _isSelected; }
            set
            {
                if (_isSelected == value) return;

                _isSelected = value;

            }
        }

    }
}
