//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnitTestClientApplication.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ProjectService")]
    public interface ProjectService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectService/InsertProjectDetails", ReplyAction="http://tempuri.org/ProjectService/InsertProjectDetailsResponse")]
        SharedModelLibrary.ProjectModel InsertProjectDetails(SharedModelLibrary.ProjectModel project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectService/InsertProjectDetails", ReplyAction="http://tempuri.org/ProjectService/InsertProjectDetailsResponse")]
        System.Threading.Tasks.Task<SharedModelLibrary.ProjectModel> InsertProjectDetailsAsync(SharedModelLibrary.ProjectModel project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectService/addUsersToProject", ReplyAction="http://tempuri.org/ProjectService/addUsersToProjectResponse")]
        bool addUsersToProject(SharedModelLibrary.UserModel[] selectedUsers, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectService/addUsersToProject", ReplyAction="http://tempuri.org/ProjectService/addUsersToProjectResponse")]
        System.Threading.Tasks.Task<bool> addUsersToProjectAsync(SharedModelLibrary.UserModel[] selectedUsers, int projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectService/getTeamInvites", ReplyAction="http://tempuri.org/ProjectService/getTeamInvitesResponse")]
        SharedModelLibrary.UserInvitesModel[] getTeamInvites(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProjectService/getTeamInvites", ReplyAction="http://tempuri.org/ProjectService/getTeamInvitesResponse")]
        System.Threading.Tasks.Task<SharedModelLibrary.UserInvitesModel[]> getTeamInvitesAsync(int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ProjectServiceChannel : UnitTestClientApplication.ServiceReference1.ProjectService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProjectServiceClient : System.ServiceModel.ClientBase<UnitTestClientApplication.ServiceReference1.ProjectService>, UnitTestClientApplication.ServiceReference1.ProjectService {
        
        public ProjectServiceClient() {
        }
        
        public ProjectServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProjectServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProjectServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SharedModelLibrary.ProjectModel InsertProjectDetails(SharedModelLibrary.ProjectModel project) {
            return base.Channel.InsertProjectDetails(project);
        }
        
        public System.Threading.Tasks.Task<SharedModelLibrary.ProjectModel> InsertProjectDetailsAsync(SharedModelLibrary.ProjectModel project) {
            return base.Channel.InsertProjectDetailsAsync(project);
        }
        
        public bool addUsersToProject(SharedModelLibrary.UserModel[] selectedUsers, int projectId) {
            return base.Channel.addUsersToProject(selectedUsers, projectId);
        }
        
        public System.Threading.Tasks.Task<bool> addUsersToProjectAsync(SharedModelLibrary.UserModel[] selectedUsers, int projectId) {
            return base.Channel.addUsersToProjectAsync(selectedUsers, projectId);
        }
        
        public SharedModelLibrary.UserInvitesModel[] getTeamInvites(int userId) {
            return base.Channel.getTeamInvites(userId);
        }
        
        public System.Threading.Tasks.Task<SharedModelLibrary.UserInvitesModel[]> getTeamInvitesAsync(int userId) {
            return base.Channel.getTeamInvitesAsync(userId);
        }
    }
}
